---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_access_entry"
description: |-
  Access Entry Configurations for an EKS Cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_eks_access_entry

Access Entry Configurations for an EKS Cluster.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksAccessEntry } from "./.gen/providers/aws/eks-access-entry";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EksAccessEntry(this, "example", {
      clusterName: Token.asString(awsEksClusterExample.name),
      kubernetesGroups: ["group-1", "group-2"],
      principalArn: Token.asString(awsIamRoleExample.arn),
      type: "STANDARD",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `clusterName` – (Required) Name of the EKS Cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]+$`).
* `principalArn` – (Required) The IAM Principal ARN which requires Authentication access to the EKS cluster.

The following arguments are optional:

* `kubernetesGroups` – (Optional) List of string which can optionally specify the Kubernetes groups the user would belong to when creating an access entry.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `type` - (Optional) Defaults to STANDARD which provides the standard workflow. EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX types disallow users to input a username or groups, and prevent associations.
* `userName` - (Optional) Defaults to principal ARN if user is principal else defaults to assume-role/session-name is role is used.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `accessEntryArn` - Amazon Resource Name (ARN) of the Access Entry.
* `createdAt` - Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the EKS add-on was created.
* `modifiedAt` - Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the EKS add-on was updated.
* `tagsAll` - (Optional) Key-value map of resource tags, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `20m`)
* `update` - (Default `20m`)
* `delete` - (Default `40m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EKS add-on using the `clusterName` and `principalArn` separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksAccessEntry } from "./.gen/providers/aws/eks-access-entry";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EksAccessEntry.generateConfigForImport(
      this,
      "myEksEntry",
      "my_cluster_name:my_principal_arn"
    );
  }
}

```

Using `terraform import`, import EKS access entry using the `clusterName` and `principalArn` separated by a colon (`:`). For example:

```console
% terraform import aws_eks_access_entry.my_eks_access_entry my_cluster_name:my_principal_arn
```

<!-- cache-key: cdktf-0.20.1 input-4cbae1b29c9b439db972457ec0767129557dfd675ba69857457d5a745c54e649 -->